# -*- coding: utf-8 -*-
"""Slack Error Linker Bot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12JlNi2EqmAtG6ik81gbsUZdpGnSE_ycs
"""

import os
import re
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler

# --- Configuration ---
SLACK_BOT_TOKEN = os.environ.get("SLACK_BOT_TOKEN")
SLACK_APP_TOKEN = os.environ.get("SLACK_APP_TOKEN")
SLACK_SIGNING_SECRET = os.environ.get("SLACK_SIGNING_SECRET")

# --- Initialization ---
app = App(token=SLACK_BOT_TOKEN, signing_secret=SLACK_SIGNING_SECRET)

# --- Bot Logic ---
# Define the regex for both error types
ORDER_ERROR_REGEX = r"`?\[ERROR PROCESSING\]`?: Error processing order\s+([\w-]+)"
FIREBLOCKS_ERROR_REGEX = r"transactionId: '([\w-]+)'"

def post_link_reply(say, message, entity_type, entity_id, url_path):
    """
    Helper function to construct the URL and post the reply to Slack.
    This avoids code duplication.
    """
    try:
        admin_url = f"https://onramp-admin.xcoins.com/{url_path}/{entity_id}"
        thread_ts = message.get('ts')
        say(
            text=f"ðŸ”Ž Here's a direct link for {entity_type} `{entity_id}`:\n{admin_url}",
            thread_ts=thread_ts
        )
        print(f"Successfully created link for {entity_type}: {entity_id}")
    except Exception as e:
        print(f"Error posting message to Slack: {e}")


# --- Main Handler ---
@app.event("message")
def handle_all_messages(message, say, context, logger):
    """
    This function handles all messages and checks for multiple error patterns.
    """
    # We only care about real user messages
    if message.get('subtype') is not None:
        return

    message_text = message.get('text', '')
    print(f"DEBUG: Bot saw a message: '{message_text}'")

    # --- Check for the FIRST error type (Order Error) ---
    order_match = re.search(ORDER_ERROR_REGEX, message_text)
    if order_match:
        order_uuid = order_match.group(1)
        print(f"DEBUG: Matched ORDER_ERROR_REGEX. Found UUID: {order_uuid}")
        post_link_reply(say, message, "order", order_uuid, "orders/show")
        return # Stop processing after a match

    # --- Check for the SECOND error type (Fireblocks Error) ---
    fireblocks_match = re.search(FIREBLOCKS_ERROR_REGEX, message_text)
    if fireblocks_match:
        transaction_id = fireblocks_match.group(1)
        print(f"DEBUG: Matched FIREBLOCKS_ERROR_REGEX. Found transactionId: {transaction_id}")
        # Using the same URL structure as requested by the user.
        post_link_reply(say, message, "transaction", transaction_id, "orders/show")
        return # Stop processing after a match

    # If no patterns matched, print a failure message.
    print("DEBUG: No known error patterns matched the message text.")


# --- Start the App ---
if __name__ == "__main__":
    print("ðŸ¤– Slack bot is starting...")
    handler = SocketModeHandler(app, SLACK_APP_TOKEN)
    handler.start()